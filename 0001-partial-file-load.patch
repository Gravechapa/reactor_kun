From 614b1f0e88d5b83124313c2b728ce3d3289d1253 Mon Sep 17 00:00:00 2001
From: Gravechapa <Gravechapa@protonmail.com>
Date: Mon, 18 Apr 2022 06:18:47 +0300
Subject: [PATCH] partial file load

---
 include/tgbot/net/HttpReqArg.h  |  4 ++--
 include/tgbot/types/InputFile.h |  9 ++-------
 src/Api.cpp                     | 36 ++++++++++++++++-----------------
 src/net/CurlHttpClient.cpp      |  7 +++++--
 src/net/HttpParser.cpp          |  6 +++++-
 src/types/InputFile.cpp         |  5 +----
 6 files changed, 33 insertions(+), 34 deletions(-)

diff --git a/include/tgbot/net/HttpReqArg.h b/include/tgbot/net/HttpReqArg.h
index fcdd424..8a801a2 100644
--- a/include/tgbot/net/HttpReqArg.h
+++ b/include/tgbot/net/HttpReqArg.h
@@ -20,8 +20,8 @@ class TGBOT_API HttpReqArg {
 
 public:
     template<typename T>
-    HttpReqArg(std::string name, const T& value, bool isFile = false, std::string mimeType = "text/plain", std::string fileName = "") :
-            name(std::move(name)), value(boost::lexical_cast<std::string>(value)), isFile(isFile), mimeType(std::move(mimeType)), fileName(std::move(fileName))
+    HttpReqArg(std::string name, const T& value, bool isFile = false, std::string mimeType = "text/plain") :
+            name(std::move(name)), value(boost::lexical_cast<std::string>(value)), isFile(isFile), mimeType(std::move(mimeType))
     {
     }
 
diff --git a/include/tgbot/types/InputFile.h b/include/tgbot/types/InputFile.h
index 0467d87..030d604 100644
--- a/include/tgbot/types/InputFile.h
+++ b/include/tgbot/types/InputFile.h
@@ -18,20 +18,15 @@ class TGBOT_API InputFile {
 public:
     typedef std::shared_ptr<InputFile> Ptr;
 
-    /**
-     * @brief Contents of a file.
-     */
-    std::string data;
-
     /**
      * @brief Mime type of a file.
      */
     std::string mimeType;
 
     /**
-     * @brief File name.
+     * @brief File path.
      */
-    std::string fileName;
+    std::string filePath;
 
     /**
      * @brief Creates new InputFile::Ptr from an existing file.
diff --git a/src/Api.cpp b/src/Api.cpp
index ff39805..a9a5581 100644
--- a/src/Api.cpp
+++ b/src/Api.cpp
@@ -87,7 +87,7 @@ Message::Ptr Api::sendPhoto(std::int64_t chatId, boost::variant<InputFile::Ptr,
     args.emplace_back("chat_id", chatId);
     if (photo.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(photo);
-        args.emplace_back("photo", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("photo", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         args.emplace_back("photo", boost::get<std::string>(photo));
     }
@@ -115,7 +115,7 @@ Message::Ptr Api::sendAudio(std::int64_t chatId, boost::variant<InputFile::Ptr,
     args.emplace_back("chat_id", chatId);
     if (audio.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(audio);
-        args.emplace_back("audio", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("audio", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         args.emplace_back("audio", boost::get<std::string>(audio));
     }
@@ -133,7 +133,7 @@ Message::Ptr Api::sendAudio(std::int64_t chatId, boost::variant<InputFile::Ptr,
     }
     if (thumb.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(thumb);
-        args.emplace_back("thumb", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("thumb", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         auto thumbStr = boost::get<std::string>(thumb);
         if (!thumbStr.empty()) {
@@ -161,13 +161,13 @@ Message::Ptr Api::sendDocument(std::int64_t chatId, boost::variant<InputFile::Pt
     args.emplace_back("chat_id", chatId);
     if (document.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(document);
-        args.emplace_back("document", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("document", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         args.emplace_back("document", boost::get<std::string>(document));
     }
     if (thumb.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(thumb);
-        args.emplace_back("thumb", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("thumb", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         auto thumbStr = boost::get<std::string>(thumb);
         if (!thumbStr.empty()) {
@@ -289,7 +289,7 @@ Message::Ptr Api::sendSticker(std::int64_t chatId, boost::variant<InputFile::Ptr
     args.emplace_back("chat_id", chatId);
     if (sticker.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(sticker);
-        args.emplace_back("sticker", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("sticker", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         args.emplace_back("sticker", boost::get<std::string>(sticker));
     }
@@ -316,7 +316,7 @@ File::Ptr Api::uploadStickerFile(std::int64_t userId, const InputFile::Ptr pngSt
     vector<HttpReqArg> args;
     args.reserve(2);
     args.emplace_back("user_id", userId);
-    args.emplace_back("png_sticker", pngSticker->data, true, pngSticker->mimeType, pngSticker->fileName);
+    args.emplace_back("png_sticker", pngSticker->filePath, true, pngSticker->mimeType);
     return _tgTypeParser.parseJsonAndGetFile(sendRequest("uploadStickerFile", args));
 }
 
@@ -328,7 +328,7 @@ bool Api::createNewStickerSet(std::int64_t userId, const string& name, const str
     args.emplace_back("title", title);
     if (pngSticker.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(pngSticker);
-        args.emplace_back("png_sticker", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("png_sticker", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         args.emplace_back("png_sticker", boost::get<std::string>(pngSticker));
     }
@@ -349,7 +349,7 @@ bool Api::addStickerToSet(std::int64_t userId, const string& name, boost::varian
     args.emplace_back("name", name);
     if (pngSticker.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(pngSticker);
-        args.emplace_back("png_sticker", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("png_sticker", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         args.emplace_back("png_sticker", boost::get<std::string>(pngSticker));
     }
@@ -381,7 +381,7 @@ Message::Ptr Api::sendVideo(std::int64_t chatId, boost::variant<InputFile::Ptr,
     args.emplace_back("chat_id", chatId);
     if (video.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(video);
-        args.emplace_back("video", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("video", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         args.emplace_back("video", boost::get<std::string>(video));
     }
@@ -399,7 +399,7 @@ Message::Ptr Api::sendVideo(std::int64_t chatId, boost::variant<InputFile::Ptr,
     }
     if (thumb.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(thumb);
-        args.emplace_back("thumb", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("thumb", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         auto thumbStr = boost::get<std::string>(thumb);
         if (!thumbStr.empty()) {
@@ -430,7 +430,7 @@ Message::Ptr Api::sendAnimation(std::int64_t chatId, boost::variant<InputFile::P
     args.emplace_back("chat_id", chatId);
     if (animation.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(animation);
-        args.emplace_back("animation", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("animation", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         args.emplace_back("animation", boost::get<std::string>(animation));
     }
@@ -445,7 +445,7 @@ Message::Ptr Api::sendAnimation(std::int64_t chatId, boost::variant<InputFile::P
     }
     if (thumb.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(thumb);
-        args.emplace_back("thumb", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("thumb", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         auto thumbStr = boost::get<std::string>(thumb);
         if (!thumbStr.empty()) {
@@ -476,7 +476,7 @@ Message::Ptr Api::sendVideoNote(std::int64_t chatId, boost::variant<InputFile::P
     args.emplace_back("chat_id", chatId);
     if (videoNote.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(videoNote);
-        args.emplace_back("video_note", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("video_note", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         args.emplace_back("video_note", boost::get<std::string>(videoNote));
     }
@@ -491,7 +491,7 @@ Message::Ptr Api::sendVideoNote(std::int64_t chatId, boost::variant<InputFile::P
     }
     if (thumb.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(thumb);
-        args.emplace_back("thumb", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("thumb", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         auto thumbStr = boost::get<std::string>(thumb);
         if (!thumbStr.empty()) {
@@ -524,7 +524,7 @@ Message::Ptr Api::sendVoice(std::int64_t chatId, boost::variant<InputFile::Ptr,
     args.emplace_back("chat_id", chatId);
     if (voice.which() == 0 /* InputFile::Ptr */) {
         auto file = boost::get<InputFile::Ptr>(voice);
-        args.emplace_back("voice", file->data, true, file->mimeType, file->fileName);
+        args.emplace_back("voice", file->filePath, true, file->mimeType);
     } else /* std::string */ {
         args.emplace_back("voice", boost::get<std::string>(voice));
     }
@@ -911,7 +911,7 @@ void Api::setWebhook(const string& url, const InputFile::Ptr certificate, std::i
         args.emplace_back("url", url);
     }
     if (certificate != nullptr) {
-        args.emplace_back("certificate", certificate->data, true, certificate->mimeType, certificate->fileName);
+        args.emplace_back("certificate", certificate->filePath, true, certificate->mimeType);
     }
     if (maxConnection != 40) {
         args.emplace_back("max_connections", maxConnection);
@@ -1051,7 +1051,7 @@ bool Api::setChatPhoto(std::int64_t chatId, const InputFile::Ptr photo) const {
     vector<HttpReqArg> args;
     args.reserve(2);
     args.emplace_back("chat_id", chatId);
-    args.emplace_back("photo", photo->data, true, photo->mimeType, photo->fileName);
+    args.emplace_back("photo", photo->filePath, true, photo->mimeType);
     return sendRequest("setChatPhoto", args).get<bool>("", false);
 }
 
diff --git a/src/net/CurlHttpClient.cpp b/src/net/CurlHttpClient.cpp
index ff06138..f3bf099 100644
--- a/src/net/CurlHttpClient.cpp
+++ b/src/net/CurlHttpClient.cpp
@@ -43,11 +43,14 @@ std::string CurlHttpClient::makeRequest(const Url& url, const std::vector<HttpRe
         for (const HttpReqArg& a : args) {
             part = curl_mime_addpart(mime);
 
-            curl_mime_data(part, a.value.c_str(), a.value.size());
             curl_mime_type(part, a.mimeType.c_str());
             curl_mime_name(part, a.name.c_str());
             if (a.isFile) {
-                curl_mime_filename(part, a.fileName.c_str());
+                curl_mime_filedata(part, a.value.c_str());
+            }
+            else
+            {
+                curl_mime_data(part, a.value.c_str(), a.value.size());
             }
         }
         curl_easy_setopt(curl, CURLOPT_MIMEPOST, mime);
diff --git a/src/net/HttpParser.cpp b/src/net/HttpParser.cpp
index 246c47c..316082c 100644
--- a/src/net/HttpParser.cpp
+++ b/src/net/HttpParser.cpp
@@ -1,6 +1,7 @@
 #include "tgbot/net/HttpParser.h"
 
 #include "tgbot/tools/StringTools.h"
+#include "tgbot/tools/FileTools.h"
 
 #include <boost/algorithm/string.hpp>
 
@@ -59,12 +60,15 @@ string HttpParser::generateRequest(const Url& url, const vector<HttpReqArg>& arg
 
 string HttpParser::generateMultipartFormData(const vector<HttpReqArg>& args, const string& boundary) const {
     string result;
-    for (const HttpReqArg& item : args) {
+    vector<HttpReqArg>* mutableArgs = const_cast<vector<HttpReqArg>*>(&args);
+    for (HttpReqArg& item : *mutableArgs) {
         result += "--";
         result += boundary;
         result += "\r\nContent-Disposition: form-data; name=\"";
         result += item.name;
         if (item.isFile) {
+            item.fileName = StringTools::split(item.value, '/').back();
+            item.value = FileTools::read(item.value);
             result += "\"; filename=\"" + item.fileName;
         }
         result += "\"\r\n";
diff --git a/src/types/InputFile.cpp b/src/types/InputFile.cpp
index c74c73e..26971fe 100644
--- a/src/types/InputFile.cpp
+++ b/src/types/InputFile.cpp
@@ -1,6 +1,4 @@
 #include "tgbot/types/InputFile.h"
-#include "tgbot/tools/StringTools.h"
-#include "tgbot/tools/FileTools.h"
 
 #include <memory>
 #include <string>
@@ -11,9 +9,8 @@ namespace TgBot {
 
 InputFile::Ptr InputFile::fromFile(const string& filePath, const string& mimeType) {
     auto result(make_shared<InputFile>());
-    result->data = FileTools::read(filePath);
     result->mimeType = mimeType;
-    result->fileName = StringTools::split(filePath, '/').back();
+    result->filePath = filePath;
     return result;
 }
 
-- 
2.35.3

